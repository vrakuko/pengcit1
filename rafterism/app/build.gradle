// rafterism/app/build.gradle

plugins {
    // Plugin 'java' menambahkan kapabilitas untuk mengkompilasi kode Java.
    id 'java'

    // Plugin 'application' menambahkan task untuk membuat dan menjalankan aplikasi Java
    // yang bisa dieksekusi dari command line (misalnya, task 'run' dan 'distTar'/'distZip').
    id 'application'

    // Menerapkan plugin 'com.google.protobuf' ke modul 'app' ini.
    // Plugin ini akan menangani kompilasi file .proto menjadi kode Java.
    id 'com.google.protobuf'
}

// Mendefinisikan group dan version untuk artefak yang akan dihasilkan oleh modul ini (misalnya, file JAR).
group = 'raft' // Sesuaikan dengan nama package utama kode Java Anda.
version = '1.0-SNAPSHOT' // Versi aplikasi Anda.

// Konfigurasi untuk kompilasi Java.
java {
    // Menentukan versi Java yang digunakan untuk menulis source code.
    sourceCompatibility = JavaVersion.VERSION_11
    // Menentukan versi Java bytecode yang ingin dihasilkan saat kompilasi.
    targetCompatibility = JavaVersion.VERSION_11
}

// Blok 'repositories' di sini spesifik untuk modul 'app',
// meskipun dalam kasus ini sama dengan yang ada di 'allprojects'.
repositories {
    mavenCentral()
}

// 'ext' digunakan untuk mendefinisikan properti tambahan (extra properties).
// Di sini kita mendefinisikan versi dependensi agar mudah dikelola dan konsisten.
ext {
    grpcVersion = '1.50.2'       // Versi untuk library gRPC
    protobufVersion = '3.21.7'   // Versi untuk library Protocol Buffers
    sparkJavaVersion = '2.9.4'   // Versi untuk library SparkJava
    gsonVersion = '2.10.1'       // Versi untuk library Gson
}

// Blok 'dependencies' adalah tempat Anda mendeklarasikan semua library eksternal
// yang dibutuhkan oleh kode di modul 'app' ini.
dependencies {
    // gRPC dependencies:
    // 'implementation' berarti dependensi ini dibutuhkan saat kompilasi dan runtime.
    implementation "io.grpc:grpc-netty-shaded:${project.ext.grpcVersion}" // Implementasi gRPC menggunakan Netty
    implementation "io.grpc:grpc-protobuf:${project.ext.grpcVersion}"     // Dukungan gRPC untuk Protocol Buffers
    implementation "io.grpc:grpc-stub:${project.ext.grpcVersion}"         // Base classes untuk stub gRPC
    implementation "com.google.protobuf:protobuf-java-util:${project.ext.protobufVersion}" // Utilitas untuk Protocol Buffers Java

    // 'compileOnly' berarti dependensi ini hanya dibutuhkan saat kompilasi dan
    // tidak akan dimasukkan ke dalam artefak runtime (misalnya, JAR).
    // Ini digunakan untuk anotasi @Generated yang dihasilkan oleh protoc-gen-grpc-java.
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'

    // SparkJava untuk membuat Client HTTP Server
    implementation "com.sparkjava:spark-core:${project.ext.sparkJavaVersion}"

    // Gson untuk parsing dan serialisasi JSON
    implementation "com.google.code.gson:gson:${project.ext.gsonVersion}"

    // Contoh dependensi untuk testing (jika Anda akan menulis unit test menggunakan JUnit 5)
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

// Konfigurasi untuk plugin 'application'.
application {
    // Memberitahu Gradle main class mana yang harus dijalankan saat aplikasi dieksekusi
    // menggunakan task 'run' atau saat membuat distribusi aplikasi.
    // Ganti 'raft.Main' dengan full qualified name dari Main class Anda.
    mainClass = 'raft.App'
}

// Konfigurasi untuk plugin 'com.google.protobuf'.
protobuf {
    protoc {
        // Memberitahu Gradle di mana mencari executable 'protoc' (compiler protobuf)
        // atau versi mana yang harus diunduh dari repositori.
        artifact = "com.google.protobuf:protoc:${project.ext.protobufVersion}"
    }
    plugins {
        // Mendefinisikan plugin gRPC untuk 'protoc'.
        // Ini akan memberitahu 'protoc' untuk juga men-generate kode service gRPC.
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${project.ext.grpcVersion}"
        }
    }
    generateProtoTasks {
        // Mengkonfigurasi semua task yang men-generate kode dari file .proto.
        all().each { task ->
            // Memastikan output Java standar (untuk message protobuf) juga di-generate.
            task.builtins {
                java {}
            }
            // Mengaktifkan plugin gRPC untuk task ini agar kode service gRPC di-generate.
            task.plugins {
                grpc {}
            }
            // Direktori output untuk file yang di-generate.
            // Gradle biasanya menentukannya secara otomatis ke 'build/generated/source/proto/...'.
            // Anda biasanya tidak perlu meng-override ini.
            // task.generatedFilesBaseDir = "$projectDir/src/generated"
        }
    }
    // // Memberitahu Gradle di mana file .proto Anda berada.
    // sourceSets {
    //     main { // Untuk source set 'main' (bukan 'test')
    //         proto {
    //             // Lokasi direktori yang berisi file .proto Anda.
    //             // Relatif terhadap direktori modul 'app'.
    //             srcDir 'src/main/proto'
    //         }
    //         // Secara otomatis, Gradle akan menambahkan direktori output dari kompilasi protobuf
    //         // ke source set Java. Ini memastikan bahwa kode Java yang Anda tulis
    //         // bisa mengimpor dan menggunakan class-class yang di-generate dari file .proto.
    //         // Jika karena suatu alasan ini tidak terjadi secara otomatis, Anda bisa menambahkannya manual:
    //         // java {
    //         //    srcDirs += files("$projectDir/build/generated/source/proto/main/java")
    //         //    srcDirs += files("$projectDir/build/generated/source/proto/main/grpc")
    //         // }
    //     }
    // }
}

// Jika Anda menggunakan JUnit 5 untuk testing (opsional).
tasks.named('test', Test) {
   useJUnitPlatform()
}