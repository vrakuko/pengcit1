syntax = "proto3"; // Specifies the Protobuf version (proto3 is modern)

// Option for Java-specific generated code
option java_multiple_files = true; // Generates a separate .java file for each top-level message/service
option java_package = "raft.grpc"; // The Java package where generated classes will reside
option java_outer_classname = "RaftRpcProto"; // The name of the outer class if java_multiple_files is false (less common with true)

// Define messages that represent your data structures
// These correspond to your 'Alamat', 'Entry' classes
message NodeAddress {
  string host = 1; // Field type and field number (must be unique within message)
  int32 port = 2;
}

message LogEntry {
  int32 term = 1;
  string command = 2;
  string key = 3;
  string value = 4;
}

// Define RPC Request and Response messages
message RaftVoteRequest {
  int32 term = 1;
  NodeAddress candidate_id = 2; // Using the NodeAddress message type
  NodeAddress from_id = 3;      // The sender of the request
  NodeAddress to_id = 4;        // The intended recipient of the request
  int32 last_log_index = 5;
  int32 last_log_term = 6;
}

message RaftVoteResponse {
  int32 term = 1;
  bool vote_granted = 2;
  NodeAddress from_id = 3;
  NodeAddress to_id = 4;
}

message RaftAppendEntriesRequest {
  int32 term = 1;
  NodeAddress leader_id = 2;
  NodeAddress from_id = 3;
  NodeAddress to_id = 4;
  int32 prev_log_index = 5;
  int32 prev_log_term = 6;
  repeated LogEntry entries = 7; // 'repeated' for lists/arrays
  int32 leader_commit = 8;
}

message RaftAppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
  NodeAddress from_id = 3;
  NodeAddress to_id = 4;
}

// Define your RPC service (for Raft's inter-node communication)
service RaftService {
  rpc RequestVote (RaftVoteRequest) returns (RaftVoteResponse);
  rpc AppendEntries (RaftAppendEntriesRequest) returns (RaftAppendEntriesResponse);
}